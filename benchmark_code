import time
import random
import matplotlib.pyplot as plt

def benchmark_sort_algorithms():
    array_sizes = [5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000]
    times_insertion_sort = []
    times_selection_sort = []
    times_bubble_sort = []
    for size in array_sizes:
        test_data = [random.randint(0, 10000) for _ in range(size)]
        start_time = time.time()
        insertion_sort(test_data.copy())
        elapsed_time = time.time() - start_time
        times_insertion_sort.append(elapsed_time)
        
        start_time = time.time()
        selection_sort(test_data.copy())
        elapsed_time = time.time() - start_time
        times_selection_sort.append(elapsed_time)

        start_time = time.time()
        bubble_sort(test_data.copy())
        elapsed_time = time.time() - start_time
        times_bubble_sort.append(elapsed_time)

    plt.figure(figsize=(12, 6))
    plt.plot(array_sizes, times_insertion_sort, 'o-', label="Insertion Sort")
    plt.plot(array_sizes, times_selection_sort, 's-', label="Selection Sort")
    plt.plot(array_sizes, times_bubble_sort, '^-', label="Bubble Sort")
    plt.xlabel('Array Size')
    plt.ylabel('Time (seconds)')
    plt.title('Sorting Algorithm Benchmark')
    plt.legend()
    plt.grid(True)
    plt.show()

def insertion_sort(array):
    for i in range(1, len(array)):
        key = array[i]
        j = i - 1
        while j >= 0 and array[j] > key:
            array[j + 1] = array[j]
            j -= 1
        array[j + 1] = key

def selection_sort(array):
    for i in range(len(array)):
        min_index = i
        for j in range(i + 1, len(array)):
            if array[j] < array[min_index]:
                min_index = j
        array[i], array[min_index] = array[min_index], array[i]

def bubble_sort(array):
    n = len(array)
    for i in range(n):
        swapped = False
        for j in range(0, n - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
                swapped = True
        if not swapped:
            break

benchmark_sort_algorithms()
